C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS_RTU
OBJECT MODULE PLACED IN ..\Output\modbus_rtu.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\Emembed\Src\modbus_rtu.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus_rtu.lst) OBJECT(
                    -..\Output\modbus_rtu.obj)

line level    source

   1          #include "modbus_rtu.h"
   2          
   3          MODBIS_INFO modbus;
   4          
   5          /**
   6           * @brief       modbus_rtu  无奇偶校验
   7           *
   8           * @param   void
   9           *
  10           * @return  void 
  11          **/
  12          void Modbus_Event( void )
  13          {
  14   1          uint16_t crc,rccrc;
  15   1          
  16   1          /*1.接收完毕                                           */
  17   1          if( rs485.RX4_rev_end_Flag == 1 )
  18   1          {
  19   2      
  20   2              /*2.清空接收完毕标志位                              */    
  21   2              rs485.RX4_rev_end_Flag = 0;
  22   2      
  23   2              /*3.CRC校验                                         */
  24   2              crc = MODBUS_CRC16(rs485.RX4_buf, rs485.RX4_rev_cnt-2);
  25   2              rccrc = (rs485.RX4_buf[rs485.RX4_rev_cnt-1]) | (rs485.RX4_buf[rs485.RX4_rev_cnt-2]<<8);
  26   2      
  27   2              /*4.清空接收计数                                    */
  28   2              rs485.RX4_rev_cnt = 0; 
  29   2      
  30   2              /*5.CRC校验通过，进行地址域校验                      */
  31   2              if( crc == rccrc )
  32   2              {
  33   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  34   3                  if( rs485.RX4_buf[0] == ADDR_EB )
  35   3                  {
  36   4                      switch ( rs485.RX4_buf[1] )
  37   4                      {
  38   5                          case 0x03:
  39   5                              Modbus_Fun3();
  40   5                              break;
  41   5      
  42   5                          case 0x04:
  43   5                              Modbus_Fun4();
  44   5                              break;
  45   5      
  46   5                          case 0x06:
  47   5                              Modbus_Fun6();
  48   5                              break;  
  49   5      
  50   5                          case 0x10:  
  51   5                              Modbus_Fun16();
  52   5      
  53   5                          default:
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 2   

  54   5                              break;
  55   5                      }
  56   4                  }
  57   3              }
  58   2          }
  59   1      }
  60          
  61          
  62          /**
  63           * @brief       读输入寄存器  03
  64           *
  65           * @param   void
  66           *
  67           * @return  void 
  68          **/
  69          void Modbus_Fun3( void )
  70          {
  71   1          uint16_t i;
  72   1      
  73   1          modbus.send_value_addr  = 3;                //DATA1 H 位置
  74   1          modbus.byte_cnt   = (rs485.RX4_buf[4]<<8 | rs485.RX4_buf[5]) *2;
  75   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
  76   1      
  77   1          rs485.TX4_buf[0]  = ADDR_EB;                //Addr
  78   1          rs485.TX4_buf[1]  = 0x03;                   //Fun
  79   1          rs485.TX4_buf[2]  = modbus.byte_cnt;        //Byte Count
  80   1      
  81   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++ )
  82   1          {
  83   2              /*    每次循环前初始化byte_info                       */
  84   2              modbus.byte_info_H = modbus.byte_info_L = 0X00;
  85   2              switch (i)
  86   2              {   
  87   3                  /*  40001 风速查询                     */
  88   3                  case 0x00:
  89   3      
  90   3      
  91   3                      break;
  92   3      
  93   3                  /*  40002 LED开关状态查询                     */    
  94   3                  case 0x01:
  95   3      
  96   3                      break;
  97   3      
  98   3                  /*  40003 3路220V开关使能查询                         */
  99   3                  case 0x02:    
 100   3      
 101   3                      break;
 102   3      
 103   3                  /*  40004 同步状态查询              */
 104   3                  case 0x03:    
 105   3      
 106   3      
 107   3                      break;
 108   3      
 109   3                  /*  40005 工作模式查询                     */
 110   3                  case 0x04:   
 111   3      
 112   3                      break;
 113   3      
 114   3                  /*  40006 报警温度查询                     */
 115   3                  case 5:   
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 3   

 116   3              
 117   3      
 118   3                      break;
 119   3                  default:
 120   3                      break;
 121   3              }
 122   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_H;
 123   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_L;
 124   2          }
 125   1          slave_to_master(0x03,3 + modbus.byte_cnt);
 126   1      }
 127          
 128          
 129          /**
 130           * @brief       读输出寄存器  04
 131           *
 132           * @param   void
 133           *
 134           * @return  void 
 135          **/
 136          void Modbus_Fun4( void )
 137          {
 138   1          uint16_t i;
 139   1      
 140   1          modbus.send_value_addr  = 3;                 //DATA1 H 位置
 141   1          modbus.byte_cnt   = (rs485.RX4_buf[4]<<8 | rs485.RX4_buf[5]) *2;
 142   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
 143   1      
 144   1          rs485.TX4_buf[0]  = ADDR_EB;                //Addr
 145   1          rs485.TX4_buf[1]  = 0x04;                   //Fun
 146   1          rs485.TX4_buf[2]  = modbus.byte_cnt;        //Byte Count
 147   1      
 148   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++ )
 149   1          {
 150   2              /*    每次循环前初始化byte_info                       */
 151   2              modbus.byte_info_H = modbus.byte_info_L = 0X00;
 152   2              switch (i)
 153   2              {
 154   3                  /*  30001  1~7通道液位信息                        */
 155   3                  case 0x00:
 156   3                      ink_scan();
 157   3                      modbus.byte_info_H = level.level17_info_H;
 158   3                      modbus.byte_info_L = level.level17_info_L;
 159   3                      break;
 160   3      
 161   3                  /*  30002   8~14通道液位信息              */
 162   3                  case 0x01:
 163   3                      modbus.byte_info_H = level.level814_info_H;
 164   3                      modbus.byte_info_L = level.level814_info_L;
 165   3      
 166   3                      break;
 167   3      
 168   3                  /*  30003 温湿度                   */
 169   3                  case 0x02:
 170   3                      modbus.byte_info_H = dht11.dht11_humidity;
 171   3                      modbus.byte_info_L = dht11.dht11_temp;
 172   3                      break;
 173   3      
 174   3                  default:
 175   3                      break;
 176   3              }
 177   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_H;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 4   

 178   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_L;
 179   2          }
 180   1          slave_to_master(0x04,3 + modbus.byte_cnt);
 181   1      }
 182          
 183          
 184          /**
 185           * @brief       写单个输出寄存器  06
 186           *
 187           * @param   void
 188           *
 189           * @return  void 
 190          **/
 191          void Modbus_Fun6( void )
 192          {
 193   1          switch (rs485.RX4_buf[3])
 194   1          {
 195   2              /*  40001                        */
 196   2              case 0x00:                  
 197   2      
 198   2                  break;
 199   2      
 200   2              /*  40002                                   */
 201   2              case 0x01:                                         
 202   2      
 203   2      
 204   2                  break;
 205   2      
 206   2              /*  40003                             */
 207   2              case 0x02:                                         
 208   2      
 209   2                  break;  
 210   2                  
 211   2      
 212   2              /*  40004  循环控制循环控制(开关及档位)                  */
 213   2              case 0x03:                  
 214   2                  //dc_ctrl.cir_level = rs485.RX4_buf[4];   
 215   2                  dc_ctrl.cir_switch = rs485.RX4_buf[5];
 216   2                  if(dc_ctrl.cir_switch == 1)
 217   2                  {
 218   3                      pwm_ctrl(CIR_CTRL,dc_ctrl.cir_level);
 219   3                  }else
 220   2                  {
 221   3                      pwm_ctrl(CIR_CTRL,0);
 222   3                  }
 223   2                  
 224   2                  break;
 225   2      
 226   2              /*  40006  循环控制                  */
 227   2              case 0x04:                  
 228   2      
 229   2                  break;
 230   2      
 231   2              /*  40007  搅拌控制(开关及档位)                   */
 232   2              case 0x05:   
 233   2                  //dc_ctrl.stir_level = rs485.RX4_buf[5];  
 234   2                  dc_ctrl.stir_switch = rs485.RX4_buf[5];
 235   2                  if(dc_ctrl.stir_switch == 1)
 236   2                  {
 237   3                      pwm_ctrl(STIR_CTRL,dc_ctrl.stir_level);
 238   3                  }else
 239   2                  {
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 5   

 240   3                      pwm_ctrl(STIR_CTRL,0);
 241   3                  }
 242   2        
 243   2                  break;
 244   2      
 245   2              /*  40007  搅拌控制                   */
 246   2              case 0x06:   
 247   2        
 248   2                  break;
 249   2      
 250   2              /*  40007  缺墨延时时间                   */
 251   2              case 0x07:  
 252   2                  level.level_delay = rs485.RX4_buf[5] * 100;
 253   2      
 254   2                  break;    
 255   2      
 256   2              default:
 257   2                  break;   
 258   2          }
 259   1          slave_to_master(0x06,8);
 260   1      }
 261          
 262          
 263          
 264          /**
 265           * @brief       写多个输出寄存器  16
 266           *
 267           * @param   void
 268           *
 269           * @return  void 
 270          **/
 271          void Modbus_Fun16( void )
 272          {
 273   1          uint16_t i;
 274   1      
 275   1          modbus.rcv_value_addr = 7;                  //DATA1 H位置
 276   1          modbus.byte_cnt   = rs485.RX4_buf[6];
 277   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
 278   1      
 279   1          
 280   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++)
 281   1          {
 282   2              modbus.byte_info_H = rs485.RX4_buf[modbus.rcv_value_addr];
 283   2              modbus.byte_info_L = rs485.RX4_buf[modbus.rcv_value_addr + 1];
 284   2              switch (i)
 285   2              {
 286   3                  /*  40001  循环控制(开关及档位)                      */
 287   3                  case 0x00:                  
 288   3                      dc_ctrl.cir_level = modbus.byte_info_H;
 289   3                      dc_ctrl.cir_switch = modbus.byte_info_L;
 290   3                      if(dc_ctrl.cir_switch == 1)
 291   3                      {
 292   4                          pwm_ctrl(CIR_CTRL,dc_ctrl.cir_level);
 293   4                      }else
 294   3                      {
 295   4                          pwm_ctrl(CIR_CTRL,0);
 296   4                      }
 297   3      
 298   3                      break;
 299   3      
 300   3                  /*  40002     循环控制(启停时间)                              */
 301   3                  case 0x01:                                         
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 6   

 302   3                      dc_ctrl.cir_stop_time  = modbus.byte_info_H * 100;  
 303   3                      dc_ctrl.cir_start_time = modbus.byte_info_L * 100;     
 304   3                      
 305   3                      break;
 306   3      
 307   3                  /*  40003    搅拌控制(开关及档位)                         */
 308   3                  case 0x02:                                         
 309   3                      dc_ctrl.stir_level = modbus.byte_info_H;
 310   3                      dc_ctrl.stir_switch = modbus.byte_info_L;
 311   3                      if(dc_ctrl.stir_switch == 1)
 312   3                      {
 313   4                          pwm_ctrl(STIR_CTRL,dc_ctrl.stir_level);
 314   4                      }else
 315   3                      {
 316   4                          pwm_ctrl(STIR_CTRL,0);
 317   4                      }
 318   3      
 319   3                      break;  
 320   3                      
 321   3                  /*  40004  搅拌控制(启停时间)                   */
 322   3                  case 0x03:   
 323   3                      dc_ctrl.stir_stop_time  = modbus.byte_info_H * 100;  
 324   3                      dc_ctrl.stir_start_time = modbus.byte_info_L * 100;    
 325   3      
 326   3                      break;
 327   3      
 328   3                  /*  40005  缺墨延时时间                   */
 329   3                  case 0x04:                                         
 330   3                      level.level_delay = modbus.byte_info_L * 100;
 331   3      
 332   3                      break;
 333   3      
 334   3                  default:
 335   3                      break;
 336   3              }
 337   2              modbus.rcv_value_addr += 2;         //从Value1_H →→ 从Value2_H
 338   2          }
 339   1      
 340   1          slave_to_master(0x10,8);
 341   1      }
 342          
 343          
 344          
 345          /**
 346           * @brief       从机回复主机
 347           *  
 348           * @param   code_num:功能码       
 349           * @param   length:数据长度        
 350           * 
 351            @return  crc16:crc校验的值 2byte
 352           */
 353          void slave_to_master(uint8_t code_num,uint8_t length)
 354          {
 355   1          uint16_t crc;
 356   1      
 357   1          switch (code_num)
 358   1          {
 359   2              case 0x03:
 360   2                  crc = MODBUS_CRC16(rs485.TX4_buf,length);
 361   2      
 362   2                  rs485.TX4_buf[length+1] = crc;                 //CRC H
 363   2                  rs485.TX4_buf[length] = crc>>8;            //CRC L
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 7   

 364   2      
 365   2                  rs485.TX4_send_bytelength = length + 2;
 366   2                  
 367   2                  break;
 368   2              case 0x04:
 369   2                  crc = MODBUS_CRC16(rs485.TX4_buf,length);
 370   2      
 371   2                  rs485.TX4_buf[length+1] = crc;                 //CRC H
 372   2                  rs485.TX4_buf[length] = crc>>8;            //CRC L
 373   2      
 374   2                  rs485.TX4_send_bytelength = length + 2;
 375   2                  
 376   2                  break;    
 377   2      
 378   2              case 0x06:
 379   2                  memcpy(rs485.TX4_buf,rs485.RX4_buf,8);
 380   2      
 381   2                  rs485.TX4_send_bytelength = length;
 382   2                  
 383   2                  break;   
 384   2      
 385   2              case 0x10:
 386   2                  memcpy(rs485.TX4_buf,rs485.RX4_buf,6);
 387   2              
 388   2                  crc = MODBUS_CRC16(rs485.TX4_buf,6);
 389   2      
 390   2                  rs485.TX4_buf[7] = crc;                 //CRC H
 391   2                  rs485.TX4_buf[6] = crc>>8;              //CRC L
 392   2              
 393   2                  rs485.TX4_send_bytelength = length;
 394   2                  
 395   2                  break;         
 396   2      
 397   2              default:
 398   2                  break;
 399   2          }
 400   1      
 401   1          DR4 = 1;                                 //485可以发送
 402   1          delay_ms(2);
 403   1          S4CON |= S4TI;                              //开始发送
 404   1          delay_ms(1);
 405   1      }
 406          
 407          
 408          /**
 409           * @brief       crc校验函数
 410           * 
 411           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
 412           * @param   length:数据长度           
 413           * 
 414            @return  crc16:crc校验的值 2byte
 415           */
 416          uint16_t MODBUS_CRC16(uint8_t *buf, uint8_t length)
 417          {
 418   1              uint8_t i;
 419   1              uint16_t        crc16;
 420   1      
 421   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
 422   1              crc16 = 0xffff; 
 423   1      
 424   1              do
 425   1              {
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        06/27/2025 11:39:29 PAGE 8   

 426   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */    
             -    
 427   2                      crc16 ^= (uint16_t)*buf;                //
 428   2                      for(i=0; i<8; i++)              
 429   2                      {
 430   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位 再异或0xA001    */
 431   3                              if(crc16 & 1)
 432   3                  {
 433   4                      crc16 = (crc16 >> 1) ^ 0xA001;
 434   4                  }
 435   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位                */
 436   3                  else
 437   3                  {
 438   4                      crc16 >>= 1;
 439   4                  }           
 440   3                      }
 441   2                      buf++;
 442   2              }while(--length != 0);
 443   1      
 444   1              return  (crc16);
 445   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1222    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
